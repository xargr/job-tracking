{"ast":null,"code":"import _Object$assign from \"@babel/runtime-corejs2/core-js/object/assign\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from 'react';\nimport FeatureList from './FeatureList';\nimport ModalForm from '../ModalForm';\n\nclass JobsPanel extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"loadLocalStorage\", () => {\n      const localData = JSON.parse(localStorage.getItem('data'));\n\n      if (localData) {\n        this.setState({\n          data: localData\n        });\n      }\n    });\n\n    _defineProperty(this, \"clickAddJob\", column => {\n      this.setState({\n        isOpen: !this.state.isOpen,\n        column\n      });\n    });\n\n    _defineProperty(this, \"handleModalData\", data => {\n      this.setState({\n        isOpen: !this.state.isOpen\n      }, () => {\n        this.saveDataToLocalStorage(data);\n      });\n    });\n\n    _defineProperty(this, \"saveDataToLocalStorage\", data => {\n      if (window) {\n        const {\n          column\n        } = this.state;\n        const oldStorage = JSON.parse(localStorage.getItem('data'));\n\n        if (oldStorage && oldStorage[column]) {\n          const obj = oldStorage;\n          obj[column] = [...oldStorage[column], data];\n          localStorage.setItem('data', _JSON$stringify(obj));\n          this.loadLocalStorage();\n        } else if (oldStorage && !oldStorage[column]) {\n          const obj = _Object$assign(oldStorage, {\n            [column]: [data]\n          });\n\n          localStorage.setItem('data', _JSON$stringify(obj));\n          this.loadLocalStorage();\n        } else {\n          const obj = {};\n          obj[column] = [data];\n          localStorage.setItem('data', _JSON$stringify(obj));\n          this.loadLocalStorage();\n        }\n      }\n    });\n\n    this.state = {\n      isOpen: false,\n      column: 'wishlist',\n      data: {}\n    };\n    this.columns = ['wishlist', 'applied', 'interview', 'offer', 'rejected'];\n  }\n\n  componentDidMount() {\n    this.loadLocalStorage();\n    window.addEventListener('click', event => {\n      if (this.state.isOpen) {\n        // create dom element\n        const elem = document.createElement('div');\n        const div = elem.setAttribute('class', 'overlay'); // compare created dom element and element that clicked on\n\n        const isOuterClick = elem.isEqualNode(event.target); // if is equal set state to close modal\n\n        if (isOuterClick) {\n          this.setState({\n            isOpen: !this.state.isOpen\n          });\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', () => {});\n  }\n\n  render() {\n    const {\n      isOpen,\n      data\n    } = this.state;\n    return React.createElement(React.Fragment, null, this.columns.map(comp => React.createElement(FeatureList, {\n      key: comp,\n      data: data[comp],\n      title: comp,\n      clickAddJob: this.clickAddJob\n    })), isOpen && React.createElement(ModalForm, {\n      handleData: this.handleModalData\n    }));\n  }\n\n}\n\nexport default JobsPanel;","map":null,"metadata":{},"sourceType":"module"}