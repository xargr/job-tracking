{"version":3,"file":"static/webpack/static/development/pages/index.js.b052f23cc575f189a83a.hot-update.js","sources":["webpack:///./components/context/JobContext.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport data from '../../lib/data';\n\nconst JobContext = React.createContext();\n\nconst JobContextProvider = () => {\n  const [state, setState] = useState({});\n\n  useEffect(() => {\n    const initialState = JSON.parse(localStorage.getItem('data')) || data;\n    () => setState(initialState);\n\n    localStorage.setItem('data', JSON.stringify(state));\n  });\n\n  useEffect(() => {\n    const initialState = JSON.parse(localStorage.getItem('data')) || data;\n    () => setState(initialState);\n\n    localStorage.setItem('data', JSON.stringify(state));\n  });\n\n  const onDragEnd = result => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const start = state.columns[source.droppableId];\n    const finish = state.columns[destination.droppableId];\n\n    if (start === finish) {\n      const newJobIds = Array.from(start.jobs);\n\n      newJobIds.splice(source.index, 1);\n      newJobIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        jobs: newJobIds\n      };\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n\n      this.setState(newState);\n      return;\n    }\n\n    const startJobIds = Array.from(start.jobs);\n    startJobIds.splice(source.index, 1);\n\n    const newStart = {\n      ...start,\n      jobs: startJobIds\n    };\n\n    const finishJobIds = Array.from(finish.jobs);\n    finishJobIds.splice(destination.index, 0, draggableId);\n\n    const newFinish = {\n      ...finish,\n      jobs: finishJobIds\n    };\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n\n    this.setState(newState);\n  };\n\n  return (\n    <JobContext.Provider value={{ ...state, onDragEnd }}>\n      {this.props.children}\n    </JobContext.Provider>\n  );\n};\n\nexport default JobContextProvider;\nexport { JobContext };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AAEA;AAFA;AACA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AAEA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;;A","sourceRoot":""}