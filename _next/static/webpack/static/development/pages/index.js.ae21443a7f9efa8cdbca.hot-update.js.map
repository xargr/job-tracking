{"version":3,"file":"static/webpack/static/development/pages/index.js.ae21443a7f9efa8cdbca.hot-update.js","sources":["webpack:///./components/JobsPanel/JobsPanel.js"],"sourcesContent":["import React from 'react';\nimport FeatureList from './FeatureList';\nimport ModalForm from '../ModalForm';\n\nclass JobsPanel extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      column: 'wishlist',\n      data: {},\n      modalData: {\n        item: [],\n        index: null\n      }\n    };\n    this.columns = ['wishlist', 'applied', 'interview', 'offer', 'rejected'];\n  }\n\n  componentDidMount() {\n    this.loadLocalStorage();\n\n    window.addEventListener('click', event => {\n      if (this.state.isOpen) {\n        // create dom element\n        const elem = document.createElement('div');\n        const div = elem.setAttribute('class', 'overlay');\n\n        // compare created dom element and element that clicked on\n        const isOuterClick = elem.isEqualNode(event.target);\n\n        // if is equal set state to close modal\n        if (isOuterClick) {\n          this.setState({\n            isOpen: !this.state.isOpen\n          });\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', () => {});\n  }\n\n  loadLocalStorage = () => {\n    const localData = JSON.parse(localStorage.getItem('data'));\n\n    if (localData) {\n      this.setState({ data: localData });\n    }\n  };\n\n  clickAddJob = column => {\n    this.setState({\n      isOpen: !this.state.isOpen,\n      column\n    });\n  };\n\n  handleModalData = data => {\n    this.setState(\n      {\n        isOpen: !this.state.isOpen\n      },\n      () => {\n        this.saveDataToLocalStorage(data);\n      }\n    );\n  };\n\n  saveDataToLocalStorage = data => {\n    if (window) {\n      const { column } = this.state;\n\n      const oldStorage = JSON.parse(localStorage.getItem('data'));\n\n      if (oldStorage && oldStorage[column]) {\n        const obj = oldStorage;\n        obj[column] = [...oldStorage[column], data];\n        localStorage.setItem('data', JSON.stringify(obj));\n        this.loadLocalStorage();\n      } else if (oldStorage && !oldStorage[column]) {\n        const obj = Object.assign(oldStorage, { [column]: [data] });\n        localStorage.setItem('data', JSON.stringify(obj));\n        this.loadLocalStorage();\n      } else {\n        const obj = {};\n        obj[column] = [data];\n        localStorage.setItem('data', JSON.stringify(obj));\n        this.loadLocalStorage();\n      }\n    }\n  };\n\n  openModal = (column, item, index) => {\n    this.setState(\n      {\n        modalData: {\n          index,\n          item\n        }\n      },\n      () => {\n        this.clickAddJob(column);\n      }\n    );\n  };\n\n  render() {\n    const { isOpen, data, modalData: { item, index } } = this.state;\n\n    return (\n      <>\n        {this.columns.map(comp => (\n          <FeatureList\n            key={comp}\n            data={data[comp]}\n            title={comp}\n            clickAddJob={this.clickAddJob}\n            openModal={this.openModal}\n          />\n        ))}\n        {isOpen && <ModalForm item={item} index={index} handleData={this.handleModalData} />}\n      </>\n    );\n  }\n}\n\nexport default JobsPanel;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AAyCA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AA/CA;AAiDA;AACA;AACA;AAFA;AAIA;AACA;AAtDA;AAwDA;AAEA;AADA;AAIA;AACA;AAEA;AACA;AAjEA;AAmEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAzFA;AA2FA;AAEA;AACA;AACA;AAFA;AADA;AAOA;AACA;AAEA;AACA;AArGA;AACA;AACA;AACA;AACA;AACA;AACA;AAFA;AAJA;AASA;AAXA;AAYA;AACA;;;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AADA;AAGA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAkEA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;;;;AA1HA;AACA;AA4HA;;;;A","sourceRoot":""}