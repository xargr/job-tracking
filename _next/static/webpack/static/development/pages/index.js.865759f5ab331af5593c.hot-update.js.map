{"version":3,"file":"static/webpack/static/development/pages/index.js.865759f5ab331af5593c.hot-update.js","sources":["webpack:///./components/Jobs/JobsContainer.js"],"sourcesContent":["import React from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport data from '../../lib/data';\nimport Column from './Column';\n\nconst Container = \n\nclass JobsContainer extends React.PureComponent {\n  state = {};\n\n  componentDidMount() {\n    this._loadData();\n  }\n\n  _loadData = () => {\n    if (window) {\n      const local = JSON.parse(localStorage.getItem('data'));\n\n      if (local) {\n        this.setState({ ...local });\n        return;\n      }\n    }\n\n    this.setState({ ...data });\n  };\n\n  _saveToStorage = state => {\n    if (window) {\n      this.setState({ ...state }, () => {\n        localStorage.setItem('data', JSON.stringify(state));\n      });\n    }\n  };\n\n  onDragEnd = result => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const start = this.state.columns[source.droppableId];\n    const finish = this.state.columns[destination.droppableId];\n\n    if (start === finish) {\n      const newJobIds = Array.from(start.jobs);\n      newJobIds.splice(source.index, 1);\n      newJobIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        jobs: newJobIds\n      };\n\n      const newState = {\n        ...this.state,\n        columns: {\n          ...this.state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n\n      this._saveToStorage(newState);\n      return;\n    }\n\n    const startJobIds = Array.from(start.jobs);\n    startJobIds.splice(source.index, 1);\n\n    const newStart = {\n      ...start,\n      jobs: startJobIds\n    };\n\n    const finishJobIds = Array.from(finish.jobs);\n    finishJobIds.splice(destination.index, 0, draggableId);\n\n    const newFinish = {\n      ...finish,\n      jobs: finishJobIds\n    };\n\n    const newState = {\n      ...this.state,\n      columns: {\n        ...this.state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n\n    this._saveToStorage(newState);\n  };\n\n  render() {\n    if (!this.state.columns) {\n      return <div>Loading...</div>;\n    }\n\n    return (\n      <DragDropContext onDragEnd={this.onDragEnd}>\n        {this.state.columnOrder.map((columnId, index) => {\n          const column = this.state.columns[columnId];\n          const jobs = column.jobs.map(jobId => this.state.jobs[jobId]);\n\n          return (\n            <Column key={column.id} column={column} jobs={jobs} index={index} />\n          );\n        })}\n      </DragDropContext>\n    );\n  }\n}\n\nexport default JobsContainer;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAAA;AAAA;AACA;AADA;AACA;AADA;AACA;AADA;AAUA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AArBA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AA7BA;AA8BA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AAEA;AAFA;AACA;AAOA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AAEA;AAFA;AACA;AAQA;AACA;AACA;AAhGA;AAAA;AACA;AADA;AAAA;AAAA;AAMA;AACA;AAPA;AAAA;AAAA;AAiGA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAlHA;AACA;AADA;AAAA;AAqHA;;;;A","sourceRoot":""}