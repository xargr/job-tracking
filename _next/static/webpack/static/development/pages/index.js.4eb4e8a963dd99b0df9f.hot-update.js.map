{"version":3,"file":"static/webpack/static/development/pages/index.js.4eb4e8a963dd99b0df9f.hot-update.js","sources":["webpack:///./components/context/JobContext.js"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport uuidv4 from 'uuid/v4';\nimport data from '../../lib/data';\nimport dragAndDrop from '../../lib/dragAndDrop';\n\nconst JobContext = React.createContext();\n\nconst JobContextProvider = ({ children }) => {\n  const [state, setState] = useState();\n\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n      const initialState = JSON.parse(localStorage.getItem('data')) || data;\n      setState(initialState);\n    } else {\n      localStorage.setItem('data', JSON.stringify(state));\n    }\n  });\n\n  const onDragEnd = result => dragAndDrop(result, state, setState);\n\n  const modalTrigger = data => {\n    setState({\n      ...state,\n      isModalOpen: !state.isModalOpen,\n      modalData: {\n        columnId: data,\n        company: '',\n        position: '',\n        jobId: null\n      }\n    });\n  };\n\n  const modalSubmit = modalValues => {\n    const { company, position, columnId, jobId } = modalValues;\n\n    if (jobId) {\n      const newJobs = {\n        ...state.jobs,\n        [jobId]: {\n          ...state.jobs[jobId],\n          company,\n          position,\n          date: Date.now()\n        }\n      };\n\n      const newState = {\n        ...state,\n        jobs: newJobs,\n        isModalOpen: !state.isModalOpen,\n        modalData: {\n          columnId: null,\n          company: '',\n          position: '',\n          jobId: null\n        }\n      };\n\n      setState(newState);\n      return;\n    }\n\n    const uniqId = uuidv4();\n\n    const newJob = {\n      id: uniqId,\n      company,\n      position,\n      date: Date.now()\n    };\n\n    const newJobs = {\n      ...state.jobs,\n      [uniqId]: newJob\n    };\n\n    const selectedColumn = state.columns[columnId];\n\n    const newColumns = {\n      ...state.columns,\n      [columnId]: {\n        ...selectedColumn,\n        jobs: [...selectedColumn.jobs, uniqId]\n      }\n    };\n\n    const newState = {\n      ...state,\n      jobs: newJobs,\n      columns: newColumns,\n      isModalOpen: !state.isModalOpen,\n      modalData: {\n        columnId: null,\n        company: '',\n        position: '',\n        jobId: null\n      }\n    };\n\n    setState(newState);\n  };\n\n  const editModal = (job, columnId) => {\n    const { company, position, id } = job;\n\n    const newState = {\n      ...state,\n      isModalOpen: !state.isModalOpen,\n      modalData: {\n        columnId: columnId,\n        company,\n        position,\n        jobId: id\n      }\n    };\n\n    setState(newState);\n  };\n\n  const deleteSubmit = (jobId, columnId) => {\n    const oldState = Object.assign({}, state);\n\n    delete oldState.jobs[jobId];\n\n    const newColumnJobs = oldState.columns[columnId].jobs.filter(\n      el => el !== jobId\n    );\n\n    oldState.columns[columnId].jobs = [...newColumnJobs];\n\n    const newState = {\n      ...oldState,\n      isModalOpen: !state.isModalOpen\n    };\n\n    setState(newState);\n  };\n\n  const deleteAll = () => {\n\n  }\n  \n  return (\n    <JobContext.Provider\n      value={{\n        ...state,\n        onDragEnd,\n        modalTrigger,\n        modalSubmit,\n        editModal,\n        deleteSubmit,\n        deleteAll\n      }}\n    >\n      {children}\n    </JobContext.Provider>\n  );\n};\n\nexport default JobContextProvider;\nexport { JobContext };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AAUA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAIA;AACA;AACA;AANA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAJA;AACA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAIA;AACA;AACA;AAIA;AAJA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AALA;AACA;AAYA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAHA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAGA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAPA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAcA;AACA;AACA;;;;;A","sourceRoot":""}