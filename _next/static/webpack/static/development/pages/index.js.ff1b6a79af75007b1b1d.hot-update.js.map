{"version":3,"file":"static/webpack/static/development/pages/index.js.ff1b6a79af75007b1b1d.hot-update.js","sources":["webpack:///./components/EditModalForm.js","webpack:///./components/JobsPanel/JobsPanel.js"],"sourcesContent":["import React, { useState } from 'react';\n\nconst EditModalForm = ({\n  updateItem,\n  handleEditModalData,\n  updateIndex,\n  updateColumn,\n  deletetData\n}) => {\n  const [company, setCompany] = useState(updateItem.company);\n  const [position, setPosition] = useState(updateItem.position);\n\n  const submitData = e => {\n    e.preventDefault();\n\n    if (company.trim() && position.trim()) {\n      const data = Object.assign(\n        {},\n        {\n          company: company.trim(),\n          position: position.trim(),\n          date: Date.now()\n        }\n      );\n\n      handleEditModalData(data, updateIndex, updateColumn);\n    }\n  };\n\n  const  handle= () => {\n    deletetData(updateColumn, updateIndex);\n  };\n\n  return (\n    <>\n      <div className=\"overlay\"></div>\n      <div className=\"modal\">\n        <div className=\"modal__title\">Update</div>\n        <div className=\"modal__form\">\n          <label htmlFor=\"company\">Company</label>\n          <input\n            className=\"company__input\"\n            value={company}\n            onChange={e => setCompany(e.target.value)}\n          />\n          <label htmlFor=\"position\">Position</label>\n          <input\n            className=\"position__input\"\n            value={position}\n            onChange={e => setPosition(e.target.value)}\n          />\n          <button onClick={deletetData} className=\"delButton\">\n            Delete\n          </button>\n          <button onClick={submitData} className=\"addButton\">\n            Update\n          </button>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default EditModalForm;\n","import React from 'react';\nimport FeatureList from './FeatureList';\nimport ModalForm from '../ModalForm';\nimport EditModalForm from '../EditModalForm';\n\nclass JobsPanel extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isOpen: false,\n      column: 'wishlist',\n      data: {},\n      updateData: {},\n      updateIndex: null,\n      updateColumn: ''\n    };\n    this.columns = ['wishlist', 'applied', 'interview', 'offer', 'rejected'];\n  }\n\n  componentDidMount() {\n    this.loadLocalStorage();\n\n    window.addEventListener('click', event => {\n      if (this.state.isOpen) {\n        // create dom element\n        const elem = document.createElement('div');\n        const div = elem.setAttribute('class', 'overlay');\n\n        // compare created dom element and element that clicked on\n        const isOuterClick = elem.isEqualNode(event.target);\n\n        // if is equal set state to close modal\n        if (isOuterClick) {\n          this.setState({\n            isOpen: !this.state.isOpen,\n            updateData: {},\n            updateIndex: null,\n            updateColumn: ''\n          });\n        }\n      }\n    });\n  }\n\n  componentWillUnmount() {\n    window.removeEventListener('click', () => {});\n  }\n\n  loadLocalStorage = () => {\n    const localData = JSON.parse(localStorage.getItem('data'));\n\n    if (localData) {\n      this.setState({ data: localData });\n    }\n  };\n\n  clickAddJob = column => {\n    this.setState({\n      isOpen: !this.state.isOpen,\n      column\n    });\n  };\n\n  handleModalData = data => {\n    this.setState(\n      {\n        isOpen: !this.state.isOpen\n      },\n      () => {\n        this.saveDataToLocalStorage(data);\n      }\n    );\n  };\n\n  saveDataToLocalStorage = data => {\n    if (window) {\n      const { column } = this.state;\n\n      const oldStorage = JSON.parse(localStorage.getItem('data'));\n\n      if (oldStorage && oldStorage[column]) {\n        const obj = oldStorage;\n        obj[column] = [...oldStorage[column], data];\n        localStorage.setItem('data', JSON.stringify(obj));\n        this.loadLocalStorage();\n      } else if (oldStorage && !oldStorage[column]) {\n        const obj = Object.assign(oldStorage, { [column]: [data] });\n        localStorage.setItem('data', JSON.stringify(obj));\n        this.loadLocalStorage();\n      } else {\n        const obj = {};\n        obj[column] = [data];\n        localStorage.setItem('data', JSON.stringify(obj));\n        this.loadLocalStorage();\n      }\n    }\n  };\n\n  updateItem = (column, item, index) => {\n    this.setState({\n      isOpen: !this.state.isOpen,\n      updateColumn: column,\n      updateIndex: index,\n      updateItem: { ...item }\n    });\n  };\n\n  handleEditModalData = (data, updateIndex, updateColumn) => {\n    if (window) {\n      const oldStorage = JSON.parse(localStorage.getItem('data'));\n\n      if (oldStorage && oldStorage[updateColumn]) {\n        const obj = oldStorage;\n        obj[updateColumn][updateIndex] = { ...data };\n        localStorage.setItem('data', JSON.stringify(obj));\n        this.loadLocalStorage();\n        this.setState({\n          isOpen: !this.state.isOpen,\n          updateData: {},\n          updateIndex: null,\n          updateColumn: ''\n        });\n      }\n    }\n  };\n\n  deletetData = (updateColumn, updateIndex) => {\n    console.log(updateColumn, updateIndex);\n  };\n\n  render() {\n    const { isOpen, data, updateColumn } = this.state;\n\n    return (\n      <>\n        {this.columns.map(comp => (\n          <FeatureList\n            key={comp}\n            data={data[comp]}\n            column={comp}\n            clickAddJob={this.clickAddJob}\n            updateItem={this.updateItem}\n          />\n        ))}\n        {isOpen && !updateColumn && (\n          <ModalForm handleData={this.handleModalData} />\n        )}\n        {isOpen && updateColumn && (\n          <EditModalForm\n            {...this.state}\n            handleEditModalData={this.handleEditModalData}\n            deletetData={this.deletetData}\n          />\n        )}\n      </>\n    );\n  }\n}\n\nexport default JobsPanel;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAHA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/DA;AACA;AACA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AACA;AAFA;AA2CA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAjDA;AAmDA;AACA;AACA;AAFA;AAIA;AACA;AAxDA;AA0DA;AAEA;AADA;AAIA;AACA;AAEA;AACA;AAnEA;AAqEA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AA3FA;AA6FA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AApGA;AAsGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;AAvHA;AAyHA;AACA;AACA;AAzHA;AACA;AACA;AACA;AACA;AACA;AACA;AANA;AAQA;AAVA;AAWA;AACA;;;AACA;AAAA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAoFA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAUA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;;;;AAvJA;AACA;AAyJA;;;;A","sourceRoot":""}