{"version":3,"file":"static/webpack/static/development/pages/index.js.0552f9b1922b2e495cf9.hot-update.js","sources":["webpack:///./components/Jobs/JobsContainer.js","webpack:///./components/ModalForm.js","webpack:///./components/context/JobContext.js"],"sourcesContent":["import React, { useContext } from 'react';\nimport { DragDropContext } from 'react-beautiful-dnd';\nimport styled from 'styled-components';\nimport Column from './Column';\nimport { JobContext } from '../context/JobContext';\nimport ModalForm from '../ModalForm';\n\nconst Container = styled.div`\n  grid-row: content;\n  display: grid;\n  grid-template-columns: repeat(5, 1fr);\n  grid-column-gap: 1em;\n  background-color: #f2f5fa;\n  padding: 2em 0;\n`;\n\nconst JobsContainer = () => {\n  const {\n    columnOrder,\n    columns,\n    jobs,\n    onDragEnd,\n    modalTrigger,\n    isModalOpen,\n  } = useContext(JobContext);\n\n  return (\n    <Container>\n      <DragDropContext onDragEnd={onDragEnd}>\n        {columnOrder &&\n          columnOrder.map((columnId, index) => {\n            const column = columns[columnId];\n            const jobsList = column.jobs.map(jobId => jobs[jobId]);\n\n            return (\n              <Column\n                key={column.id}\n                column={column}\n                jobs={jobsList}\n                index={index}\n                modalTrigger={modalTrigger}\n              />\n            );\n          })}\n      </DragDropContext>\n      {isModalOpen && <ModalForm />}\n    </Container>\n  );\n};\n\nexport default JobsContainer;\n","import React, {\n  useContext,\n  useState,\n  useEffect,\n  useRef,\n  useCallback\n} from 'react';\nimport styled from 'styled-components';\nimport isModalValid from '../lib/isModalValid';\nimport { JobContext } from './context/JobContext';\n\nconst Overlay = styled.div`\n  background-color: rgba(51, 41, 41, 0.65);\n  position: fixed;\n  min-height: 100vh;\n  min-width: 100vw;\n  z-index: 10;\n  top: 0;\n  left: 0;\n`;\nconst Container = styled.div`\n  width: 360px;\n  height: auto;\n  position: absolute;\n  background: #fff;\n  top: calc(50% - 160px);\n  left: calc(50% - 180px);\n  border-radius: 5px;\n  padding: 1em;\n`;\n\nconst Close = styled.div`\n  margin: 10px 0;\n  text-align: right;\n  font-size: 1.5em;\n  height: 30px;\n  width: 100%;\n  float: right;\n  line-height: 30px;\n  font-weight: 700;\n`;\n\nconst Pointer = styled.div`\n  width: 30px;\n  height: 30px;\n  float: right;\n  text-align: center;\n  cursor: pointer;\n`;\n\nconst H4 = styled.h4`\n  font-weight: 700;\n  font-size: 1.2em;\n  font-family: sans-serif;\n  margin: 0px 0px 20px 20px;\n`;\n\nconst Label = styled.label`\n  display: block;\n  margin-bottom: 10px;\n  font-family: 'Red Hat Text', sans-serif;\n  color: rgb(152, 161, 179);\n  margin: 0px 0px 10px 15px;\n`;\n\nconst Input = styled.input`\n  display: block;\n  height: 30px;\n  width: 90%;\n  margin: 0 auto 10px;\n  border: none;\n  background-color: rgb(242, 245, 250);\n  border-radius: 0px;\n\n  &:focus {\n    outline: none;\n    border-bottom: 2px solid rgb(33, 150, 243);\n  }\n`;\n\nconst Button = styled.button`\n  margin: 20px;\n  float: right;\n  width: 75px;\n  height: 35px;\n  cursor: pointer;\n  background-color: rgb(22, 138, 230);\n  outline: none;\n  border: 1px solid rgb(22, 138, 230);\n  border-radius: 2px;\n  color: #fff;\n  font-weight: 700;\n  font-size: 1em;\n`;\n\nconst ModalForm = () => {\n  const {\n    modalData: { company, position },\n    modalTrigger,\n    modalSubmit\n  } = useContext(JobContext);\n\n  const [state, setState] = useState({\n    company,\n    position\n  });\n\n  const [isValid, setIsValid] = useState(false);\n\n  const node = useRef();\n\n  const handleClick = useCallback(e => {\n    if (node.current && !node.current.contains(e.target)) {\n      modalTrigger(null);\n    }\n  }, []);\n\n  useEffect(() => {\n    window.addEventListener('click', handleClick);\n\n    return () => {\n      window.removeEventListener('click', handleClick);\n    };\n  }, []);\n\n  const handleForm = e => {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    });\n\n    isModalValid(state, setIsValid);\n  };\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    modalSubmit(state);\n  };\n\n  return (\n    <Overlay>\n      <Container ref={node}>\n        <Close>\n          <Pointer onClick={() => modalTrigger(null)}>&#9747;</Pointer>\n        </Close>\n        <H4>Add Job</H4>\n        <Label htmlFor=\"company\">Company</Label>\n        <Input\n          name=\"company\"\n          value={state.company}\n          autoComplete=\"off\"\n          onChange={e => handleForm(e)}\n        />\n        <Label htmlFor=\"position\">Position</Label>\n        <Input\n          name=\"position\"\n          value={state.position}\n          autoComplete=\"off\"\n          onChange={e => handleForm(e)}\n        />\n        <Button disabled={!isValid} onClick={e => handleSubmit(e)}>\n          Save\n        </Button>\n      </Container>\n    </Overlay>\n  );\n};\n\nexport default ModalForm;\n","import React, { useState, useEffect, useRef } from 'react';\nimport uuidv4 from 'uuid/v4';\nimport data from '../../lib/data';\nimport dragAndDrop from '../../lib/dragAndDrop';\n\nconst JobContext = React.createContext();\n\nconst JobContextProvider = ({ children }) => {\n  const [state, setState] = useState();\n\n  const isInitialMount = useRef(true);\n\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n      const initialState = JSON.parse(localStorage.getItem('data')) || data;\n      setState(initialState);\n    } else {\n      localStorage.setItem('data', JSON.stringify(state));\n    }\n  });\n\n  const onDragEnd = result => dragAndDrop(result, state, setState);\n\n  const modalTrigger = data => {\n    setState({\n      ...state,\n      isModalOpen: !state.isModalOpen,\n      modalData: {\n        ...state.modalData,\n        columnId: data\n      }\n    });\n  };\n\n  const modalSubmit = modalValues => {\n    const { company, position } = modalValues;\n\n    const uniqId = uuidv4();\n\n    const newJob = {\n      id: uniqId,\n      company,\n      position,\n      date: Date.now()\n    };\n\n    const newJobs = {\n      ...state.jobs,\n      [uniqId]: newJob\n    };\n\n    const selectedColumnId = state.modalData.columnId;\n    const selectedColumn = state.columns[selectedColumnId];\n\n    const newColumns = {\n      ...state.columns,\n      [selectedColumnId]: {\n        ...selectedColumn,\n        jobs: [...selectedColumn.jobs, uniqId]\n      }\n    };\n\n    const newState = {\n      ...state,\n      jobs: newJobs,\n      columns: newColumns,\n      isModalOpen: !state.isModalOpen,\n      modalData: {\n        columnId: null,\n        company: '',\n        position: ''\n      }\n    };\n\n    setState(newState);\n  };\n\n  const editModal = (job, columnId) => {\n\n    const { company, position } = job;\n\n    const newState = {\n      ...state,\n      isModalOpen: !state.isModalOpen,\n      modalData: {\n        columnId: columnId,\n        company,\n        position\n      }\n    };\n\n    setState(newState);\n  \n\n  };\n\n  return (\n    <JobContext.Provider\n      value={{ ...state, onDragEnd, modalTrigger, modalSubmit, editModal }}\n    >\n      {children}\n    </JobContext.Provider>\n  );\n};\n\nexport default JobContextProvider;\nexport { JobContext };\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AALA;AAAA;AAAA;AAAA;AAAA;AAAA;AAQA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AAOA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AASA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAWA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAQA;AAAA;AAAA;AAAA;AAeA;AAAA;AAAA;AAAA;AACA;AAcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAQA;AACA;AAFA;AAPA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAaA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAFA;AAHA;AAQA;AACA;AACA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAJA;AACA;AAMA;AACA;AAIA;AACA;AACA;AACA;AAIA;AAJA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAHA;AALA;AACA;AAWA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAHA;AAHA;AACA;AASA;AAGA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;;;;;A","sourceRoot":""}