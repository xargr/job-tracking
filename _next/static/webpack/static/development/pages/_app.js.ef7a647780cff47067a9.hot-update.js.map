{"version":3,"file":"static/webpack/static/development/pages/_app.js.ef7a647780cff47067a9.hot-update.js","sources":["webpack:///./components/Page.js"],"sourcesContent":["import React, { useCallback, useEffect, useState } from 'react';\nimport styled from 'styled-components';\nimport Meta from './Meta';\nimport Header from './Header';\nimport Footer from './Footer';\nimport JobContextProvider from './context/JobContext';\nimport data from '../lib/data';\n\nimport 'reset-css';\n\nconst Container = styled.div`\n  display: grid;\n  grid-template-areas:\n    'header'\n    'content'\n    'footer';\n  grid-template-rows: 10vh 90vh 10vh;\n  grid-row-gap: 1em;\n`;\n\nconst Page = ({ children }) => {\n  const [state, setState] = useState(() => {\n    try {\n      const local = localStorage.getItem('data');\n      return local ? JSON.parse(local) : data;\n    } catch (error) {\n      return data;\n    }\n  });\n\n  const onDragEnd = result => {\n    const { destination, source, draggableId } = result;\n\n    if (!destination) {\n      return;\n    }\n\n    if (\n      destination.droppableId === source.droppableId &&\n      destination.index === source.index\n    ) {\n      return;\n    }\n\n    const start = state.columns[source.droppableId];\n    const finish = state.columns[destination.droppableId];\n\n    if (start === finish) {\n      const newJobIds = Array.from(start.jobs);\n      newJobIds.splice(source.index, 1);\n      newJobIds.splice(destination.index, 0, draggableId);\n\n      const newColumn = {\n        ...start,\n        jobs: newJobIds\n      };\n\n      const newState = {\n        ...state,\n        columns: {\n          ...state.columns,\n          [newColumn.id]: newColumn\n        }\n      };\n\n      setState(newState);\n      return;\n    }\n\n    const startJobIds = Array.from(start.jobs);\n    startJobIds.splice(source.index, 1);\n\n    const newStart = {\n      ...start,\n      jobs: startJobIds\n    };\n\n    const finishJobIds = Array.from(finish.jobs);\n    finishJobIds.splice(destination.index, 0, draggableId);\n\n    const newFinish = {\n      ...finish,\n      jobs: finishJobIds\n    };\n\n    const newState = {\n      ...state,\n      columns: {\n        ...state.columns,\n        [newStart.id]: newStart,\n        [newFinish.id]: newFinish\n      }\n    };\n\n    setState(newState);\n  };\n\n  useEffect(() => {\n    window.localStorage.setItem('data', JSON.stringify(state));\n  }, [state]);\n\n  return (\n    <Container>\n      <JobContext.Provider value={{ ...state, onDragEnd }}>\n        <Meta />\n        <Header />\n        {children}\n        <Footer />\n      </JobContext.Provider>\n    </Container>\n  );\n};\n\nexport default Page;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAAA;AACA;AASA;AAAA;AACA;AADA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAAA;AAAA;AACA;AASA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AAEA;AAFA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AACA;AAAA;AACA;AACA;AAEA;AAFA;AACA;AAIA;AAEA;AAFA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;;;;A","sourceRoot":""}